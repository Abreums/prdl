---
title: "Importações"
author: "Simoldes"
---

```{r}
#| echo: false
#| warning: false

library(tidyverse)
library(janitor)
library(readxl)
library(here)
library(cellranger)
library(gdata)

```

Este arquivo contém referência para o conjunto de importações necessárias para migração de dados do XPERT.

Lista de importações:

-   Itens

    -   Finais

    -   Intermediários

    -   Matéria Prima

-   Estruturas (BOM)

-   Processos (BOP)

-   Fornecedores

# Itens

Carga de dados exportadas do XPert.

```{r}
#| warning: false

source("R/read-itens.R")
itens <- read_itens()
s_itens <- read_itens_summary()

itens |> write_rds("data/itens.rds")
itens <- read_rds("data/itens.rds")

itens |> View()

```

### Preços

Informações de preços extraídas pelo Williiam

```{r}
precos <- 
  readxl::read_excel(here::here("data", "Tabela de precos_SPI_SPB_XPERT.xlsx")) |> 
  janitor::clean_names() |> 
  filter(!str_detect(nome_local_de_descarga, "^AMOSTRA"),
         !str_detect(nome_local_de_descarga, "^TESTE"),
         !str_detect(nome_local_de_descarga, "^REM DE TESTE"),
         !str_detect(nome_local_de_descarga, "^PROJETO"),
         !str_detect(nome_local_de_descarga, "^PEDIDO FECHADO PROJETO")
         ) |> 
  filter(preco > 1000)

precos  |> glimpse()


```

## Finais

Itens acabados ou finais inicial com código F.

Vamos importar apenas aqueles que estiverem ativos (que possuem BOM).

Portugal enviou apenas a lista de itens "Ativos", porém, há itens ativos sem BOM. Estes não serão importados.

Também vamos identificar itens com código do cliente duplicado. Por exemplo, 2 códigos F diferentes com o mesmo código do cliente implica em erro de cadastro. Serão encaminhados para a Engenharia ajustar.

```{r}

# busca lista de peças acabadas que possuem estrutura de produto
f_itens <- get_finished_itens(s_itens)

# Precisamos reduzir os itens acabados apenas ao sub-grupo dos itens vigentes.
# vamos utilizar o critério de filtro dos itens presente na Carteira de Pedido
# dos últimos meses.

source("R/carteira-pedidos.R")  
pedidos <- get_order_history()  
# Vamos excluir os pedidos que não são de montadoras.
pedidos <-
  pedidos |>
  filter(
    !customer %in% c(
      "BELLS INDUSTRIA",
      "BIOPLASTICOS",
      "CEMAS DO BRASIL",
      "FAURECIA",
      "FAURECIA AUTOMOT. BRASIL",
      "FWC GANCHEIRAS",
      "HB - SMR LOCACAO DE",
      "HB SMR SP 0008-73",
      "INDUSERVICE SERVICOS",
      "KUNST",
      "LINKPLAS IND.PLASTIC",
      "MADIS CONFECCOES",
      "NEW TECH COMPANY",
      "NILKO TECNOLOGIA LTD",
      "OMEGA RECYCLING",
      "PKS PLASTICOS",
      "PLASMAPLAST",
      "SIMOLDES ACOS BRASIL",
      "SIMOLDES PLASTICOS",
      "SPI",
      "SUMMA POLIMEROS"
    )
  )
pedidos |> write_rds("data/carteira-pedidos.RDS")
pedidos <- read_rds("data/carteira-pedidos.RDS")


#### Relatórios de Vendas
source("R/read-vendas.R")  
spb_vendas <- 
  get_itens_from_branch("SPB") 
spb_vendas <-
  spb_vendas |>
  mutate(filial = "SPB")
spi_vendas <- 
  get_itens_from_branch("SPI") 
spi_vendas <- 
  spi_vendas |> 
  mutate(filial = "SPI")  

vendas <- 
  rbind(spb_vendas, spi_vendas)

vendas <- 
  vendas |> 
  mutate(year = year(as.Date(status))) |> 
  group_by(item) |> 
  summarise(year = max(year))

# acrescentar informações de projeto
vendas <- 
  vendas |> 
  left_join(itens |> select(item, prj_sigla, prj_desc)) |>
  group_by(item, prj_sigla, prj_desc) |> 
  summarise(year = max(year, na.rm = TRUE)) |> 
  filter(str_detect(item, "^F"))

vendas |> write_rds("data/vendas.rds")
vendas <- read_rds("data/vendas.rds")

## Vamos juntar os dados da Carteira de Pedidos com Vendas:
# Vamos importar todos os produtos que aparecem nos relatórios de 
# Pedidos de Vendas 2025
pedidos_e_vendas <- 
  pedidos |>
  mutate(year = year(order_date)) |> 
  group_by(item) |> 
  summarise(year = max(year)) |> 
  left_join(itens |> select(item, prj_sigla, prj_desc)) |> 
  distinct(prj_sigla, prj_desc, year, item) |> 
  filter(str_detect(item, "^F"))

# Vamos acrescentar os produtos vendidos desde 2023
pedidos_e_vendas <-
  pedidos_e_vendas |> 
  rbind(vendas) |> 
  group_by(item) |> 
  summarise(prj_sigla = first(prj_sigla, na.rm = TRUE),
            prj_desc = first(prj_desc, na.rm = TRUE),
            year = max(year)) |> 
  select(item, prj_sigla, prj_desc, year) |> 
  filter(str_detect(item, "^F"))

pedidos_e_vendas |> write_rds("data/p-importar.rds")

# ESTA LINHA PARA RECUPERAÇÃO FUTURA:
pedidos_e_vendas <- read_rds("data/p-importar.rds")

pedidos_e_vendas |> write_csv2("codigos-f.csv")


# F SIMOLDES
f_simoldes <- 
  pedidos_e_vendas |> 
  left_join(f_itens) |> 
  arrange(estabelecimento, cod_comp, item, prj_sigla) |> 
  select(cod_comp, item, estabelecimento, desc, desc2,prj_sigla, prj_desc, ncm)
f_simoldes |> write_rds("data/f-simoldes.rds")

# ESTA LINHA PARA RECUPERAR OS DADOS:
f_simoldes <- read_rds("data/f-simoldes.rds")


# vamos importar no XPert separadamente por estabelecimento.
f_simoldes |> View()



# Vamos reduzir os códigos F apenas para aqueles que aparecem 
# em pedidos_e_vendas
f_itens_excluidos <- 
  pedidos_e_vendas |> 
  anti_join(f_itens)
f_itens_excluidos |> View()

# Códigos para achar itens duplicados:

duplicados_comp <-
  f_simoldes |>
  count(cod_comp, s_ou_mr) |>
  filter(n > 1) |>
  filter(!str_detect(cod_comp, "^-"))

duplicados <-
  duplicados_comp |>
  left_join(f_simoldes) |>
#  pivot_wider(names_from = estabelecimento, values_from = n) |>
  arrange(cod_comp, estabelecimento, prj_sigla, item) |> 
  select(cod_comp, item, estabelecimento, prj_sigla, prj_desc, desc, desc2, un, 
         xp_temagr, xp_tematc)

duplicados |> View()

duplicados |> write_csv("duplicados.csv")
# 
# duplicados |> write_csv("duplicados.csv")
# 
# source("R/read-bom.R")
# bom <- read_bom()
# 
# t_b <- get_bom_from_id("F01612013002A", bom)
# 
# 
# 
# projetos <- 
#   itens |> 
#   filter(str_detect(item, "^F")) 
# 
# projetos |> write_rds("data/projetos.rds")
# projetos <- read_rds("data/projetos.rds")

```

## Preço

```{r}
itens_com_preco <-
  f_itens |>
  left_join(precos |> 
              select(numero_artigo, cliente, nome_cliente,
                     preco, valido_de, valido_ate, 
                     nome_local_de_descarga, 
                     numero_do_pedido_de_fecho),
            join_by(item == numero_artigo)) |> 
  filter(cliente %in% c(991, 992, 1001, 1003, 1004, 1005, 1050, 1051, 1070,
                        1088, 1119, 1120, 1137, 1484, 1817, 1868, 2405, 2437,
                        2815, 2964, 2995, 3139))


itens_com_preco |> nrow()

importar_codigos <- 
  pedidos_e_vendas |> 
  left_join(itens_com_preco, join_by(item == item)) |> 
  mutate(cod_comp = str_trim(cod_comp, side = "both")) |> 
  mutate(cod_comp = str_replace_all(cod_comp, " ", ""))  |> 
  select(cod_comp, item, ncm, cliente, nome_cliente, estabelecimento)

importar_codigos |> write.csv2("importar-codigos.csv")

```

## Importar SPI

```{r}

f_spi <- 
  f_simoldes |>
  filter(estabelecimento == "SPI") |> 
  select(item) |> 
  distinct(item)
f_spi |> nrow()

f_spb <- 
  f_simoldes |> 
  filter(estabelecimento == "SPB") |> 
  select(item) |> 
  distinct(item)
f_spb |> nrow()

f_spi <- 
  f_spi |> 
  left_join(s_itens |> filter(estabelecimento == "SPI")) 

f_spi <- 
  f_spi |>
  mutate(grupo_estoque = "10") |> 
  mutate(fam_mat = case_when(
    str_detect(prj_sigla, "CX") ~   "10CXPLST",
    str_detect(prj_sigla, "X70") ~  "10RNX70",
    str_detect(prj_sigla, "X62") ~  "10RNX70",
    str_detect(prj_sigla, "1312") ~ "10RN1312",
    str_detect(prj_sigla, "VIVA") ~ "10GMVIVA",
    str_detect(prj_sigla, "V230") ~ "10VWGOLF",
    str_detect(prj_sigla, "UPPP") ~ "10VWUP",
    str_detect(prj_sigla, "UPC") ~  "10VWUP",
    str_detect(prj_sigla, "UP") ~   "10VWUP",
    str_detect(prj_sigla, "U79P") ~ "10RNU79",
    str_detect(prj_sigla, "SCXD") ~ "10PCSC",
    str_detect(prj_sigla, "SCDI") ~ "10PCSC",
    str_detect(prj_sigla, "PM7") ~  "10GMPM7",
    str_detect(prj_sigla, "PA") ~   "10XXPA",
    str_detect(prj_sigla, "P426") ~ "10VV426",
    str_detect(prj_sigla, "OTH") ~  "10OUTROS",
    str_detect(prj_sigla, "NTC") ~  "10MBNTC",
    str_detect(prj_sigla, "NCG") ~  "10SCNCG",
    str_detect(prj_sigla, "MQBF") ~ "10VWMQB",
    str_detect(prj_sigla, "MQB") ~  "10VWMQB",
    str_detect(prj_sigla, "LTC") ~  "10MBLTC",
    str_detect(prj_sigla, "L98") ~  "10XXL98",
    str_detect(prj_sigla, "HPN") ~  "10XXHPN",
    str_detect(prj_sigla, "HJF") ~  "10RNHJF",
    str_detect(prj_sigla, "HJDE") ~ "10RNHJDE",
    str_detect(prj_sigla, "HJDD") ~ "10RNHJDD",
    str_detect(prj_sigla, "FX/J") ~ "10XXSTFX",
    str_detect(prj_sigla, "FPN") ~  "10XXFPN",
    str_detect(prj_sigla, "FOX") ~  "10VWFOX",
    str_detect(prj_sigla, "F1H") ~  "10STF1H",
    str_detect(prj_sigla, "CUVF") ~ "10VW246",
    str_detect(prj_sigla, "CUV") ~  "10VW246",
    str_detect(prj_sigla, "C4P") ~  "10PCC4",
    str_detect(prj_sigla, "C4E") ~  "10PCC4",
    str_detect(prj_sigla, "B02A") ~ "10RNB02A",
    str_detect(prj_sigla, "AI94") ~ "10PCAI94",
    str_detect(prj_sigla, "AI58") ~ "10PCAI58",
    str_detect(prj_sigla, "A91") ~  "10PC208",
    str_detect(prj_sigla, "516T") ~ "10ST516",
    str_detect(prj_sigla, "270H") ~ "10VW270",
    str_detect(prj_sigla, "23X") ~  "10VW23X",
    str_detect(prj_sigla, "220P") ~ "10VW220",
    str_detect(prj_sigla, "220C") ~ "10VW220",
    str_detect(prj_sigla, "216T") ~ "10VW216",
    str_detect(prj_sigla, "216C") ~ "10VW216",
    TRUE ~ NA
  )) |> 
  mutate(fam_com = case_when(
        str_detect(prj_sigla, "CX") ~ "CX",
    str_detect(prj_sigla, "X70") ~  "RSA",
    str_detect(prj_sigla, "X62") ~  "RSA",
    str_detect(prj_sigla, "1312") ~ "RSA",
    str_detect(prj_sigla, "VIVA") ~ "GMB",
    str_detect(prj_sigla, "V230") ~ "VW",
    str_detect(prj_sigla, "UPPP") ~ "VW",
    str_detect(prj_sigla, "UPC") ~  "VW",
    str_detect(prj_sigla, "UP") ~   "VW",
    str_detect(prj_sigla, "U79P") ~ "RSA",
    str_detect(prj_sigla, "SCXD") ~ "STEL",
    str_detect(prj_sigla, "SCDI") ~ "STEL",
    str_detect(prj_sigla, "PM7") ~  "GMB",
    str_detect(prj_sigla, "PA") ~   "OUTROS",
    str_detect(prj_sigla, "P426") ~ "VOLVO",
    str_detect(prj_sigla, "OTH") ~  "OUTROS",
    str_detect(prj_sigla, "NTC") ~  "MBB",
    str_detect(prj_sigla, "NCG") ~  "SCANIA",
    str_detect(prj_sigla, "MQBF") ~ "VW",
    str_detect(prj_sigla, "MQB") ~  "VW",
    str_detect(prj_sigla, "LTC") ~  "MBB",
    str_detect(prj_sigla, "L98") ~  "OUTROS",
    str_detect(prj_sigla, "HPN") ~  "OUTROS",
    str_detect(prj_sigla, "HJF") ~  "RSA",
    str_detect(prj_sigla, "HJDE") ~ "RSA",
    str_detect(prj_sigla, "HJDD") ~ "RSA",
    str_detect(prj_sigla, "FX/J") ~ "STEL",
    str_detect(prj_sigla, "FPN") ~  "OUTROS",
    str_detect(prj_sigla, "FOX") ~  "VW",
    str_detect(prj_sigla, "F1H") ~  "STEL",
    str_detect(prj_sigla, "CUVF") ~ "VW",
    str_detect(prj_sigla, "CUV") ~  "VW",
    str_detect(prj_sigla, "C4P") ~  "STEL",
    str_detect(prj_sigla, "C4E") ~  "STEL",
    str_detect(prj_sigla, "B02A") ~ "RSA",
    str_detect(prj_sigla, "AI94") ~ "STEL",
    str_detect(prj_sigla, "AI58") ~ "STEL",
    str_detect(prj_sigla, "A91") ~  "STEL",
    str_detect(prj_sigla, "516T") ~ "STEL",
    str_detect(prj_sigla, "270H") ~ "VW",
    str_detect(prj_sigla, "23X") ~  "VW",
    str_detect(prj_sigla, "220P") ~ "VW",
    str_detect(prj_sigla, "220C") ~ "VW",
    str_detect(prj_sigla, "216T") ~ "VW",
    str_detect(prj_sigla, "216C") ~ "VW",
    TRUE ~ NA
  )) |> 
    select(item, 
           desc,
           grupo_estoque,
           fam_mat,
           fam_com,
           un,
           estabelecimento,
           cod_comp)

f_spi |> nrow()
f_spi <- 
  f_spi |> 
  filter(!is.na(fam_mat)) |> 
  filter(!is.na(fam_com)) 
f_spi |> nrow()

source("R/import-f.R")
f_to_cd0209(f_spi, "f_spi.lst")



```

# Importar SPB

```{r}

f_spb <- 
  f_simoldes |>
  filter(estabelecimento == "SPB") |> 
  select(item) |> 
  distinct(item)
f_spb |> nrow()

f_spb <- 
  f_spb |> 
  left_join(s_itens |> filter(estabelecimento == "SPB")) 

f_spb <- 
  f_spb |> 
  left_join(precos |> select(item = numero_artigo, cliente, nome_cliente), join_by(item))

f_spb <- 
  f_spb |>
  mutate(grupo_estoque = "10") |> 
  mutate(fam_mat = case_when(
    str_detect(prj_sigla, "^CXPL") ~   "10CXPLST",
    str_detect(prj_sigla, "^EVI") ~    "10MNEVI",
    str_detect(prj_sigla, "^1312") ~   "10RN1312",
    str_detect(prj_sigla, "^216") ~    "10RN216",
    str_detect(prj_sigla, "^B90") ~    "10RNB90",
    str_detect(prj_sigla, "^H79") ~    "10RNH79",
    str_detect(prj_sigla, "^HHA") ~    "10RNHHA",
    str_detect(prj_sigla, "^HJD") ~    "10RNHJD",
    str_detect(prj_sigla, "^HJF") ~    "10RNHJF",
    str_detect(prj_sigla, "^U79") ~    "10RNU79",
    str_detect(prj_sigla, "^X52") ~    "10RNX52",
    str_detect(prj_sigla, "^H61") ~    "10RNH61",
    str_detect(prj_sigla, "^X62") ~    "10RNX62",
    str_detect(prj_sigla, "^X65") ~    "10RNX65",
    str_detect(prj_sigla, "^X70") ~    "10RNX70",
    str_detect(prj_sigla, "^X84") ~    "10RNX84",
    str_detect(prj_sigla, "^XBB") ~    "10RNXBB",
    str_detect(prj_sigla, "^216") ~    "10VW216",
    str_detect(prj_sigla, "^FOX") ~    "10VWFOX",
    str_detect(prj_sigla, "^GOLF") ~    "10VWGOLF",
    str_detect(prj_sigla, "^V230") ~    "10VWGOLF",
    str_detect(prj_sigla, "^MQB") ~    "10VWMQB",
    str_detect(prj_sigla, "^V216") ~    "10VWV216",
    TRUE ~ NA
  )) |> 
  mutate(fam_com = case_when(
    str_detect(fam_mat, "^10RN") ~ "RN",
    str_detect(fam_mat, "^10VW") ~ "VW",
    str_detect(fam_mat, "^10MN") ~ "MN",
    str_detect(fam_mat, "^10CX") ~ "CX",
    TRUE ~ NA
  )) |> 
  select(item, 
           desc,
           grupo_estoque,
           fam_mat,
           fam_com,
           un,
           estabelecimento,
           cod_comp) |> 
  filter(!is.na(fam_com)) |> 
  filter(!is.na(fam_mat))

f_spb |> nrow()

source("R/import-f.R")
f_to_cd0209(f_spb, "f_spb.lst")

f_spb |>
  select(item) |> 
  left_join(precos, join_by(item == numero_artigo)) |> 
  mutate(no_refa_cliente = str_replace_all(no_refa_cliente, " ", "")) |> 
  filter(!is.na(preco)) |> 
  write_csv2("f_spb.csv")




```

# Intermediários

Importados separadamente os itens F, vamos retomar a lista de f-simoldes para achar e importar os intermediários

```{r}

# O número de peças do conjunto inicial f_simoldes é maior do que 
# nos conjuntos f_spi e f_spb (esta diferença surgiu quando aplicamos filtros 
# na construção das listas por estabelecimento).
f_simoldes |> glimpse()
f_spi |> glimpse()
f_spb |> glimpse()


# Assim, vamos seguir com f_estab
f_estab <- rbind(f_spi, f_spb)

# As peças que não aparecem em f-spi e f-spb ou não possuem código do cliente
# ou são de clientes que não atendemos mais (ex.: Nissan)
f_simoldes |> anti_join(f_estab, join_by(item)) |> View()

f_estab |> write_rds("f-estab.rds")
f_estab <- read_rds("f-estab.rds")

f_estab <- 
  f_estab |> 
  left_join(precos, join_by(item == numero_artigo))

# # PARA RECUPERAR (MAIS PARA BAIXO)
# f_estab |> write_rds("data/f-stab.rds")
# f_estab <- read_rds("data/f-stab.rds")

```

## Ler estruturas de BoM e BoP

```{r}

source("R/read-bom.R")
source("R/read-bop.R")

# file_bom <- here::here("data", "BOM 2025-06-11.xlsx")
file_bom <- here::here("data", "BOM 2025-09-02.xlsx")
bom <- read_bom(file_bom)

file_bop_spi <- here::here("data", "BOP SPI 2025-07-20.xlsx")
file_bop_spb <- here::here("data", "BOP SPB 2025-07-20.xlsx")

bop_spi <- read_bop(file_bop_spi)
bop_spb <- read_bop(file_bop_spb)

bop <- rbind(bop_spi, bop_spb)

bop |> glimpse()

## Alguns itens não possuem BOM registrada!
## Pendente decidir o que fazer com estes!
f_estab |> 
  anti_join(bom, join_by(item == material_number)) |> 
  View()



```

Para cada item vamos identificar a BOM e BOP dele

```{r}

f_estab <- 
  f_estab |> 
  mutate(item_bom = map(item, ~ get_bom_from_id(.x, bom))) |> 
  mutate(item_bop = map(item, ~ get_bop_from_id(.x, bop)))

f_estab |> View()

f_estab <- 
  f_estab |> 
  mutate(semiacabado = map(item_bom, ~ get_semi_from_bom(.x))) |> 
  mutate(mp = map(item_bom, ~ get_mp_from_bom(.x)))

# PARA RECUPERAR (MAIS PARA BAIXO)
f_estab |> write_rds("data/f-stab.rds")
f_estab <- read_rds("data/f-stab.rds")


```

Obtém a lista de intermediários e a lista de MP & Comp para cada item:

### semiacabado

```{r}

f_estab |> View()

semi_geral <- 
  f_estab |> 
  select(item, semiacabado)

semi_geral <- 
  semi_geral |> 
  unnest(semiacabado) |> 
  rename(semi = bom_component) |> 
  distinct(item, semi)

ja_cadastrados <- 
  readxl::read_excel(here::here("data", "jah_cadastrados.xlsx")) |> 
  janitor::clean_names() |> 
  select(item, familia, fam_coml)

semi_geral <- 
  semi_geral |> 
  left_join(ja_cadastrados, join_by(item))

semi_geral <- 
  semi_geral |> 
  mutate(familia = str_replace(familia, "10", "20")) |> 
  filter(!is.na(semi), !is.na(familia)) |> 
  select(item = semi, fam_mat = familia, fam_com = fam_coml)

semi_geral |> View()


```

## Importar Semiacabados

```{r}


# vamos eliminar os itens duplicados com famílias diferentes.
semi_geral <- 
  semi_geral  |>
  group_by(item) |> 
  summarise(fam_mat = first(fam_mat),
            fam_com = first(fam_com, na.rm = TRUE)) |> 
  ungroup()

semi_geral  <- 
  semi_geral |> 
  left_join(s_itens, join_by(item)) 

# ANTES DE IMPORTAR VAMOS CRIAR AS FAMÍLIAS DE SEMIACABADOS
# O CÓDIGO ABAIXO GERA LISTA DE FAMÍLIAS DE SEMIACABADOS PARA SEREM REGISTRADAS
semi_geral |> 
  distinct(fam_mat, ncm) |> 
  View()

semi_geral <- 
  semi_geral |> 
  mutate(grupo_de_estoque = "20") |> 
  select(item, desc,
         grupo_estoque = grupo_de_estoque,
         fam_mat, 
         fam_com, 
         un, 
         estabelecimento, 
         cod_comp)


source("R/import-semi.R")
semi_to_cd0209(semi_geral, "semi_geral.lst")


```

## Importar Matéria Prima

```{r}

mp_geral <- 
  f_estab |> 
  select(mp) |> 
  unnest(mp) |> 
  distinct(bom_component) |> 
  rename(item = bom_component) |> 
  left_join(s_itens |> select(item, desc), join_by(item))


# Como obter as famílias de MP e Componentes?
# Vamos utilizar a lista de itens validada pela Engenharia
# Para os itens que não estiverem na lista, vamos complementar manualmente a lista:
mp_fam_sheets <- 
  readxl::excel_sheets(here::here("data", "2025-09-19 classif fam mp.xlsx"))
mp_fam <- 
  readxl::read_excel(here::here("data", "2025-09-19 classif fam mp.xlsx"),
                                sheet = mp_fam_sheets[6]) |> 
  janitor::clean_names() |>
  mutate(fam_mat = as.character(familia_ds)) |> 
  select(item, desc, fam_mat, fam_desc)

# A regra da função abaixo foi utilizada para gerar a primeira versão do arquivo 
# acima... entao... vamos manter por questões históricas, mas não recomendamos usar
#semi_geral <- set_item_family(semi_geral)
# ou ... usamos a classificação da planilha


mp_geral <- 
  mp_geral |> 
  left_join(mp_fam, join_by(item))

mp_geral <- 
mp_geral |> 
  select(item, fam_mat, fam_desc) |> 
  left_join(s_itens, join_by(item))

mp_geral <- 
  mp_geral |> 
  mutate(grupo_de_estoque = "30") |> 
  select(item, 
         desc,
         grupo_estoque = grupo_de_estoque,
         fam_mat, 
         un, 
         estabelecimento, 
         cod_comp)
mp_geral <- 
  mp_geral |> 
  filter(!is.na(item)) |> 
  filter(!is.na(un)) |> 
  mutate(un = ifelse(un == "ROLLS", "UN", un))


source("R/import-mp.R")
mp_to_cd0209(mp_geral, "mp_geral.lst")

```

## BoM do que vai importar

```{r}


x <- get_bom_from_id("F02023004001A", bom)


mp <-
  itens |>
  filter(!str_detect(item, "^E1")) |>
  filter(!str_detect(item, "^E2")) |>
  filter(!str_detect(item, "^F0")) |>
  filter(!str_detect(item, "^FA")) |>
  filter(!str_detect(item, "^IO")) |>
  filter(!str_detect(item, "^LM")) |>
  filter(!str_detect(item, "^LP")) |>
  filter(!str_detect(item, "^MA")) |>
  filter(!str_detect(item, "^MO")) |>
  filter(!str_detect(item, "^R1")) |>
  filter(!str_detect(item, "^R2")) |>
  filter(!str_detect(item, "^SE")) |>
  filter(!str_detect(item, "^SP")) |>
  filter(!str_detect(item, "^V1")) |>
  select(item, xp_temagr, xp_mat_group_desc, desc) |>
  filter(!str_detect(item, "^F")) |>    
  filter(!str_detect(item, "^I")) |>    
  filter(!str_detect(item, "^SP"))



```

## 

## Matéria Prima - Para Importar

```{r}


mp <-    
  itens |> 
  filter(item %in% mp_cmp)  

to_imp_itens <-    
  set_item_family(to_imp_itens)   

# Estes dados servem para importar em massa # Antes é preciso criar as famílias 
manualmente to_imp_itens |>    
  select(estabelecimento, item, desc, temagr, mat_group_desc, grupo_estoque, family) |> View()

```

# Importar Estrutura de 1 F

Vamos criar aqui o processo para importar os produtos de 1 item F

```{r}

item_f <- "F02023004001A"

itens |> 
  filter(str_detect(item, item_f)) |> 
  select(estabelecimento = empresa, 
         item = tetenr,
         desc,
         temagr, 
         mat_group_desc,
         grupo_estoque)

# BOM
bom_f <- get_bom_from_id("F02023004001A", bom)
bom_f

manufacted_f <- 
  bom_f |> 
  distinct(material_number) 

manufacted_f <- 
  manufacted_f |> 
  mutate(bop = map(material_number, ~ bop |> filter(part_number == .))) |> 
  unnest(bop) |> 
  mutate(desc = str_c(str_replace_na(description_1, replacement = " "),
                      str_replace_na(description_2, replacement = " ")) |>
           str_trim("both")) |> 
  select(-c(company, variant, description_1, description_2, part_number)) |> 
  select(item = material_number, desc, estabelecimento = firm, part_type,
         cycle_time = cicle_type, piece_time, setup = set_up_time, 
         machine, linha = description, multi_machines, multi_personnel, 
         material_group, matchcode)
  
manufacted_f |> View()

get_itens_from_bom <- function(bom, itens){
  components <-
    bom |> pull(bom_component)

  bom_itens <-
    itens |>
    arrange(estabelecimento, id, familia) |>
    filter(id %in% components) |>
    arrange(id)
}



```

### Acha Fs de item

```{r}

ii <- "1201564"

bom |> 
  filter(str_detect(bom_component, ii)) |> 
  distinct(material_number) |> 
  pull(material_number) |> 
  map(~ bom |> filter(str_detect(bom_component, .)) |> 
        distinct(material_number)) |> 
  reduce(rbind) |> 
  distinct(material_number) |> 
  left_join(projetos, join_by(material_number == item))


projetos |> distinct(prj_sigla, prj_desc) |> View()

```

# Ler Lista de famílias, MP e Componentes gerar aquivo para importar

```{r}

team_file <- here("data", "2025-09-19 classif fam mp.xlsx")

tf_sheets <- readxl::excel_sheets(team_file)

importar <- readxl::read_excel(team_file,
                               sheet = tf_sheets[6]) |> 
  janitor::clean_names() |> 
  select(item, desc, familia_ds, un)

importar <- 
  importar |> 
  group_by(item) |> 
  summarise(desc = first(desc),
            fam_mat = first(familia_ds),
            un = first(un)) |> 
  mutate(grupo_estoque = str_sub(fam_mat, start = 1L, end = 2L),
         fam_com = " ",
         estabelecimento = "102",
         cod_complementar = " ")

importar |> glimpse()

source("R/mass-import-datasul.R")

importar <- 
  importar |> 
  #filter(str_detect(id, "^11")) |> 
  mutate(fam_mat = as.character(fam_mat)) 

build_file_to_cd0209(importar, "mp.txt")


pp |> 
  filter(str_detect(id, "1100002"))



```
