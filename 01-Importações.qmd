---
title: "Importações"
author: "Simoldes"
---

```{r}
#| echo: false
#| warning: false

library(tidyverse)
library(janitor)
library(readxl)
library(here)
library(cellranger)
library(gdata)

```

Este arquivo contém referência para o conjunto de importações necessárias para migração de dados do XPERT.

Lista de importações:

-   Itens

    -   Finais

    -   Intermediários

    -   Matéria Prima

-   Estruturas (BOM)

-   Processos (BOP)

-   Fornecedores

# Itens

Carga de dados exportadas do XPert.

```{r}
#| warning: false

source("R/read-itens.R")
itens <- read_itens()

itens |> write_rds("data/itens.rds")
itens <- read_rds("data/itens.rds")


```

## Finais

Itens acabados ou finais inicial com código F.

Vamos importar apenas aqueles que estiverem ativos (que possuem BOM).

Portugal enviou apenas a lista de itens "Ativos", porém, há itens ativos sem BOM. Estes não serão importados.

Também vamos identificar itens com código do cliente duplicado. Por exemplo, 2 códigos F diferentes com o mesmo código do cliente implica em erro de cadastro. Serão encaminhados para a Engenharia ajustar.

```{r}

# busca lista de peças acabadas que possuem estrutura de produto
f_itens <- get_finished_itens(itens)

# Precisamos reduzir os itens acabados apenas ao sub-grupo dos itens vigentes.
# vamos utilizar o critério de filtro dos itens presente na Carteira de Pedido
# dos últimos meses.

source("R/carteira-pedidos.R")  
pedidos <- get_order_history()  
# Vamos excluir os pedidos que não são de montadoras.
pedidos <-
  pedidos |>
  filter(
    !customer %in% c(
      "BELLS INDUSTRIA",
      "BIOPLASTICOS",
      "CEMAS DO BRASIL",
      "FAURECIA",
      "FAURECIA AUTOMOT. BRASIL",
      "FWC GANCHEIRAS",
      "HB - SMR LOCACAO DE",
      "HB SMR SP 0008-73",
      "INDUSERVICE SERVICOS",
      "KUNST",
      "LINKPLAS IND.PLASTIC",
      "MADIS CONFECCOES",
      "NEW TECH COMPANY",
      "NILKO TECNOLOGIA LTD",
      "OMEGA RECYCLING",
      "PKS PLASTICOS",
      "PLASMAPLAST",
      "SIMOLDES ACOS BRASIL",
      "SIMOLDES PLASTICOS",
      "SPI",
      "SUMMA POLIMEROS"
    )
  )
pedidos |> write_rds("data/carteira-pedidos.RDS")
pedidos <- read_rds("data/carteira-pedidos.RDS")


#### Relatórios de Vendas
source("R/read-vendas.R")  
spb_vendas <- 
  get_itens_from_branch("SPB") 
spb_vendas <-
  spb_vendas |>
  mutate(filial = "SPB")
spi_vendas <- 
  get_itens_from_branch("SPI") 
spi_vendas <- 
  spi_vendas |> 
  mutate(filial = "SPI")  

vendas <- 
  rbind(spb_vendas, spi_vendas)

vendas <- 
  vendas |> 
  mutate(year = year(as.Date(status))) |> 
  group_by(item) |> 
  summarise(year = max(year))

# acrescentar informações de projeto
vendas <- 
  vendas |> 
  left_join(itens |> select(item, prj_sigla, prj_desc)) |>
  group_by(item, prj_sigla, prj_desc) |> 
  summarise(year = max(year, na.rm = TRUE)) |> 
  filter(str_detect(item, "^F"))

vendas |> write_rds("data/vendas.rds")
vendas <- read_rds("data/vendas.rds")

## Vamos juntar os dados da Carteira de Pedidos com Vendas:
# Vamos importar todos os produtos que aparecem nos relatórios de 
# Pedidos de Vendas 2025
pedidos_e_vendas <- 
  pedidos |>
  mutate(year = year(order_date)) |> 
  group_by(item) |> 
  summarise(year = max(year)) |> 
  left_join(itens |> select(item, prj_sigla, prj_desc)) |> 
  distinct(prj_sigla, prj_desc, year, item) |> 
  filter(str_detect(item, "^F"))

# Vamos acrescentar os produtos vendidos desde 2023
pedidos_e_vendas <-
  pedidos_e_vendas |> 
  rbind(vendas) |> 
  group_by(item) |> 
  summarise(prj_sigla = first(prj_sigla, na.rm = TRUE),
            prj_desc = first(prj_desc, na.rm = TRUE),
            year = max(year)) |> 
  select(item, prj_sigla, prj_desc, year) |> 
  filter(str_detect(item, "^F"))

pedidos_e_vendas |> write_rds("data/p-importar.rds")
pedidos_e_vendas <- read_rds("data/p-importar.rds")

# Vamos reduzir os códigos F apenas para aqueles que aparecem 
# em pedidos_e_vendas

f_itens_excluidos <- 
  pedidos_e_vendas |> 
  anti_join(f_itens)
f_itens_excluidos |> View()

f_simoldes <- 
  pedidos_e_vendas |> 
  left_join(f_itens) |> 
  arrange(estabelecimento, cod_comp, item, prj_sigla)
f_simoldes |> write_rds("data/f-simoldes.rds")
f_simoldes <- read_rds("data/f-simoldes.rds")

f_simoldes |> View()

# vamos importar no XPert separadamente por estabelecimento.
f_simoldes |> count(estabelecimento)

# Códigos para achar itens duplicados:

duplicados_comp <-
  f_simoldes |>
  count(cod_comp, s_ou_mr) |>
  filter(n > 1) |>
  filter(!str_detect(cod_comp, "^-"))

duplicados <-
  duplicados_comp |>
  left_join(f_simoldes) |>
  pivot_wider(names_from = estabelecimento, values_from = n) |>
  arrange(cod_comp, prj_sigla, item)

duplicados |> View()
# 
# duplicados |> write_csv("duplicados.csv")
# 
# source("R/read-bom.R")
# bom <- read_bom()
# 
# t_b <- get_bom_from_id("F01612013002A", bom)
# 
# 
# 
# projetos <- 
#   itens |> 
#   filter(str_detect(item, "^F")) 
# 
# projetos |> write_rds("data/projetos.rds")
# projetos <- read_rds("data/projetos.rds")

```

## Ler estruturas de BoM e BoP

```{r}

source("R/read-bom.R")
source("R/read-bop.R")

# file_bom <- here::here("data", "BOM 2025-06-11.xlsx")
file_bom <- here::here("data", "BOM 2025-09-02.xlsx")
bom <- read_bom(file_bom)

file_bop_spi <- here::here("data", "BOP SPI 2025-07-20.xlsx")
file_bop_spb <- here::here("data", "BOP SPB 2025-07-20.xlsx")

bop_spi <- read_bop(file_bop_spi)
bop_spb <- read_bop(file_bop_spb)

bop <- rbind(bop_spi, bop_spb)

bop |> glimpse()

## Alguns itens não possuem BOM registrada!
## Pendente decidir o que fazer com estes!
p_importar |> 
  anti_join(bom, join_by(item == material_number)) |> 
  View()

```

## BoM do que vai importar

```{r}


x <- get_bom_from_id("F02023004001A", bom)


mp <-
  itens |>
  filter(!str_detect(item, "^E1")) |>
  filter(!str_detect(item, "^E2")) |>
  filter(!str_detect(item, "^F0")) |>
  filter(!str_detect(item, "^FA")) |>
  filter(!str_detect(item, "^IO")) |>
  filter(!str_detect(item, "^LM")) |>
  filter(!str_detect(item, "^LP")) |>
  filter(!str_detect(item, "^MA")) |>
  filter(!str_detect(item, "^MO")) |>
  filter(!str_detect(item, "^R1")) |>
  filter(!str_detect(item, "^R2")) |>
  filter(!str_detect(item, "^SE")) |>
  filter(!str_detect(item, "^SP")) |>
  filter(!str_detect(item, "^V1")) |>
  select(item, xp_temagr, xp_mat_group_desc, desc) |>
  filter(!str_detect(item, "^F")) |>    
  filter(!str_detect(item, "^I")) |>    
  filter(!str_detect(item, "^SP"))



```

## 

## Matéria Prima - Para Importar

```{r}


mp <-    
  itens |> 
  filter(item %in% mp_cmp)  

to_imp_itens <-    
  set_item_family(to_imp_itens)   

# Estes dados servem para importar em massa # Antes é preciso criar as famílias 
manualmente to_imp_itens |>    
  select(estabelecimento, item, desc, temagr, mat_group_desc, grupo_estoque, family) |> View()

```

# Importar Estrutura de 1 F

Vamos criar aqui o processo para importar os produtos de 1 item F

```{r}

item_f <- "F02023004001A"

itens |> 
  filter(str_detect(item, item_f)) |> 
  select(estabelecimento = empresa, 
         item = tetenr,
         desc,
         temagr, 
         mat_group_desc,
         grupo_estoque)

# BOM
bom_f <- get_bom_from_id("F02023004001A", bom)
bom_f

manufacted_f <- 
  bom_f |> 
  distinct(material_number) 

manufacted_f <- 
  manufacted_f |> 
  mutate(bop = map(material_number, ~ bop |> filter(part_number == .))) |> 
  unnest(bop) |> 
  mutate(desc = str_c(str_replace_na(description_1, replacement = " "),
                      str_replace_na(description_2, replacement = " ")) |>
           str_trim("both")) |> 
  select(-c(company, variant, description_1, description_2, part_number)) |> 
  select(item = material_number, desc, estabelecimento = firm, part_type,
         cycle_time = cicle_type, piece_time, setup = set_up_time, 
         machine, linha = description, multi_machines, multi_personnel, 
         material_group, matchcode)
  
manufacted_f |> View()

get_itens_from_bom <- function(bom, itens){
  components <-
    bom |> pull(bom_component)

  bom_itens <-
    itens |>
    arrange(estabelecimento, id, familia) |>
    filter(id %in% components) |>
    arrange(id)
}



```

### Acha Fs de item

```{r}

ii <- "1201564"

bom |> 
  filter(str_detect(bom_component, ii)) |> 
  distinct(material_number) |> 
  pull(material_number) |> 
  map(~ bom |> filter(str_detect(bom_component, .)) |> 
        distinct(material_number)) |> 
  reduce(rbind) |> 
  distinct(material_number) |> 
  left_join(projetos, join_by(material_number == item))


projetos |> distinct(prj_sigla, prj_desc) |> View()

```

# Ler Lista de famílias, MP e Componentes gerar aquivo para importar

```{r}

team_file <- here("data", "2025-09-19 classif fam mp.xlsx")

tf_sheets <- readxl::excel_sheets(team_file)

importar <- readxl::read_excel(team_file,
                               sheet = tf_sheets[6]) |> 
  janitor::clean_names() |> 
  select(item, desc, familia_ds, un)

importar <- 
  importar |> 
  group_by(item) |> 
  summarise(desc = first(desc),
            fam_mat = first(familia_ds),
            un = first(un)) |> 
  mutate(grupo_estoque = str_sub(fam_mat, start = 1L, end = 2L),
         fam_com = " ",
         estabelecimento = "102",
         cod_complementar = " ")

importar |> glimpse()

source("R/mass-import-datasul.R")

importar <- 
  importar |> 
  #filter(str_detect(id, "^11")) |> 
  mutate(fam_mat = as.character(fam_mat)) 

build_file_to_cd0209(importar, "mp.txt")


pp |> 
  filter(str_detect(id, "1100002"))



```
